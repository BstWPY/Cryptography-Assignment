'''
使用混沌映射对图片进行置乱和异或加密以消除和原图的相关性
'''
from PIL import Image
import binascii
import numpy
A=3.7
x=0.32
#储存混沌矩阵进行异或操作
xn=[]
#置乱表(利用CryptographyDesign_main.py生成)
yn={0: 495, 1: 16, 2: 250, 3: 295, 4: 216, 5: 343, 6: 168, 7: 419, 8: 92, 9: 460, 10: 51, 11: 355, 12: 156, 13: 438, 14: 73, 15: 411, 16: 100, 17: 477, 18: 34, 19: 296, 20: 215, 21: 346, 22: 165, 23: 425, 24: 86, 25: 451, 26: 60, 27: 384, 28: 127, 29: 491, 30: 20, 31: 258, 32: 286, 33: 225, 34: 333, 35: 178, 36: 398, 37: 113, 38: 505, 39: 6, 40: 233, 41: 321, 42: 190, 43: 379, 44: 132, 45: 483, 46: 28, 47: 275, 48: 255, 49: 289, 50: 222, 51: 336, 52: 175, 53: 409, 54: 102, 55: 479, 56: 32, 57: 285, 58: 226, 59: 332, 60: 179, 61: 397, 62: 114, 63: 507, 64: 4, 65: 231, 66: 324, 67: 187, 68: 386, 69: 125, 70: 496, 71: 15, 72: 247, 73: 303, 74: 208, 75: 354, 76: 157, 77: 437, 78: 74, 79: 413, 80: 98, 81: 472, 82: 39, 83: 304, 84: 207, 85: 356, 86: 155, 87: 439, 88: 72, 89: 408, 90: 103, 91: 480, 92: 31, 93: 284, 94: 236, 95: 318, 96: 193, 97: 375, 98: 136, 99: 474, 100: 37, 101: 301, 102: 210, 103: 352, 104: 159, 105: 433, 106: 78, 107: 422, 108: 89, 109: 457, 110: 54, 111: 362, 112: 149, 113: 447, 114: 64, 115: 395, 116: 116, 117: 509, 118: 2, 119: 229, 120: 326, 121: 185, 122: 388, 123: 123, 124: 498, 125: 13, 126: 245, 127: 306, 128: 205, 129: 360, 130: 151, 131: 444, 132: 67, 133: 402, 134: 109, 135: 494, 136: 17, 137: 251, 138: 294, 139: 217, 140: 342, 141: 169, 142: 418, 143: 93, 144: 465, 145: 46, 146: 331, 147: 180, 148: 396, 149: 115, 150: 508, 151: 3, 152: 230, 153: 325, 154: 186, 155: 387, 156: 124, 157: 497, 158: 14, 159: 246, 160: 305, 161: 206, 162: 359, 163: 152, 164: 443, 165: 68, 166: 403, 167: 108, 168: 493, 169: 18, 170: 252, 171: 293, 172: 218, 173: 341, 174: 170, 175: 416, 176: 95, 177: 468, 178: 43, 179: 322, 180: 189, 181: 381, 182: 130, 183: 487, 184: 24, 185: 268, 186: 267, 187: 269, 188: 266, 189: 271, 190: 264, 191: 276, 192: 254, 193: 290, 194: 221, 195: 338, 196: 173, 197: 412, 198: 99, 199: 473, 200: 38, 201: 302, 202: 209, 203: 353, 204: 158, 205: 434, 206: 77, 207: 421, 208: 90, 209: 458, 210: 53, 211: 358, 212: 153, 213: 442, 214: 69, 215: 405, 216: 106, 217: 485, 218: 26, 219: 272, 220: 263, 221: 277, 222: 253, 223: 292, 224: 219, 225: 340, 226: 171, 227: 415, 228: 96, 229: 469, 230: 42, 231: 317, 232: 194, 233: 374, 234: 137, 235: 471, 236: 40, 237: 313, 238: 198, 239: 369, 240: 142, 241: 461, 242: 50, 243: 350, 244: 161, 245: 431, 246: 80, 247: 429, 248: 82, 249: 436, 250: 75, 251: 417, 252: 94, 253: 466, 254: 45, 255: 330, 256: 181, 257: 394, 258: 117, 259: 510, 260: 1, 261: 228, 262: 327, 263: 184, 264: 389, 265: 122, 266: 499, 267: 12, 268: 244, 269: 307, 270: 204, 271: 361, 272: 150, 273: 445, 274: 66, 275: 400, 276: 111, 277: 502, 278: 9, 279: 237, 280: 316, 281: 195, 282: 372, 283: 139, 284: 464, 285: 47, 286: 337, 287: 174, 288: 410, 289: 101, 290: 478, 291: 33, 292: 291, 293: 220, 294: 339, 295: 172, 296: 414, 297: 97, 298: 470, 299: 41, 300: 314, 301: 197, 302: 370, 303: 141, 304: 462, 305: 49, 306: 345, 307: 166, 308: 424, 309: 87, 310: 452, 311: 59, 312: 383, 313: 128, 314: 489, 315: 22, 316: 261, 317: 279, 318: 248, 319: 300, 320: 211, 321: 351, 322: 160, 323: 432, 324: 79, 325: 426, 326: 85, 327: 450, 328: 61, 329: 385, 330: 126, 331: 492, 332: 19, 333: 257, 334: 287, 335: 224, 336: 334, 337: 177, 338: 401, 339: 110, 340: 501, 341: 10, 342: 238, 343: 315, 344: 196, 345: 371, 346: 140, 347: 463, 348: 48, 349: 344, 350: 167, 351: 423, 352: 88, 353: 455, 354: 56, 355: 373, 356: 138, 357: 467, 358: 44, 359: 329, 360: 182, 361: 393, 362: 118, 363: 511, 364: 0, 365: 227, 366: 328, 367: 183, 368: 390, 369: 121, 370: 500, 371: 11, 372: 242, 373: 309, 374: 202, 375: 364, 376: 147, 377: 449, 378: 62, 379: 391, 380: 120, 381: 503, 382: 8, 383: 235, 384: 319, 385: 192, 386: 376, 387: 135, 388: 475, 389: 36, 390: 298, 391: 213, 392: 348, 393: 163, 394: 428, 395: 83, 396: 440, 397: 71, 398: 407, 399: 104, 400: 481, 401: 30, 402: 281, 403: 241, 404: 310, 405: 201, 406: 365, 407: 146, 408: 453, 409: 58, 410: 380, 411: 131, 412: 486, 413: 25, 414: 270, 415: 265, 416: 274, 417: 256, 418: 288, 419: 223, 420: 335, 421: 176, 422: 404, 423: 107, 424: 490, 425: 21, 426: 260, 427: 282, 428: 240, 429: 311, 430: 200, 431: 366, 432: 145, 433: 454, 434: 57, 435: 377, 436: 134, 437: 476, 438: 35, 439: 297, 440: 214, 441: 347, 442: 164, 443: 427, 444: 84, 445: 446, 446: 65, 447: 399, 448: 112, 449: 504, 450: 7, 451: 234, 452: 320, 453: 191, 454: 378, 455: 133, 456: 482, 457: 29, 458: 280, 459: 243, 460: 308, 461: 203, 462: 363, 463: 148, 464: 448, 465: 63, 466: 392, 467: 119, 468: 506, 469: 5, 470: 232, 471: 323, 472: 188, 473: 382, 474: 129, 475: 488, 476: 23, 477: 262, 478: 278, 479: 249, 480: 299, 481: 212, 482: 349, 483: 162, 484: 430, 485: 81, 486: 435, 487: 76, 488: 420, 489: 91, 490: 459, 491: 52, 492: 357, 493: 154, 494: 441, 495: 70, 496: 406, 497: 105, 498: 484, 499: 27, 500: 273, 501: 259, 502: 283, 503: 239, 504: 312, 505: 199, 506: 367, 507: 144, 508: 456, 509: 55, 510: 368, 511: 143}
def Logistic(x,o):#Logistic混沌映射
    return o*x*(1-x)
for i in range(1000):
     x=Logistic(x,A)#先进行1000次迭代进入混沌状态
xn.append(x)
for i in range(512*512*3):
     xn.append(Logistic(xn[i],A))
for i in range(len(xn)):
     xn[i]=int(xn[i]*255)
f=open("C:/Users/WangPY/Desktop/code/CryptographyDesign/encrypted_RGB.txt",'w')#用于储存加密后rgb的文件
img = Image.open("C:/Users/WangPY/Desktop/lena.png")
width, height = img.size
img = img.convert('RGB')
rgb_list = []
for i in range(height):
    for j in range(width):
        r, g, b = img.getpixel((i, j))
        rgb = (r, g, b)
        rgb_list.append(rgb)
png=numpy.ones((512,512))#创建像素矩阵
k=0
temp=[]
#录入像素点位置
for i in range(512):
    for j in range(512):
       png[i,j]=int(k)
       k=k+1
#每一行的置乱
for i in range(512):
    xs=dict(yn)
    while True:
        if len(xs)==0:
            break
        tmpkey=next(iter(xs))
        beginkey=-1
        tmp=png[i,xs[tmpkey]]
        tmp2=0
        while True:
            if beginkey==-1:
                beginkey=tmpkey
                png[i,xs[tmpkey]]=png[i,tmpkey]
            else:
                tmp2=png[i,xs[tmpkey]]
                png[i,xs[tmpkey]]=tmp
                tmp=tmp2
            tmpvalue=xs[tmpkey]
            del xs[tmpkey]
            tmpkey=tmpvalue
            if tmpkey==beginkey:
                break
#每一列的置乱
tmp=0
for i in range(512):
    xs=dict(yn)
    while True:
        if len(xs)==0:
            break
        tmpkey=next(iter(xs))
        beginkey=-1
        tmp=png[xs[tmpkey],i]
        tmp2=0
        while True:
            if beginkey==-1:
                beginkey=tmpkey
                png[xs[tmpkey],i]=png[tmpkey,i]
            else:
                tmp2=png[xs[tmpkey],i]
                png[xs[tmpkey],i]=tmp
                tmp=tmp2
            tmpvalue=xs[tmpkey]
            del xs[tmpkey]
            tmpkey=tmpvalue
            if tmpkey==beginkey:
                break
#异或加密
i=0
for j in range(512*512):
        temp=list(rgb_list[j])
        temp[0]=(temp[0])^xn[i%(512*512)]
        temp[1]=(temp[1])^xn[(i+1)%(512*512)]
        temp[2]=(temp[2])^xn[(i+2)%(512*512)]
        i=i+3
        rgb_list[j]=tuple(temp)
for i in range(512):
    for j in range(512):
        f.write(str(rgb_list[int(png[i,j])][0])+' '+str(rgb_list[int(png[i,j])][1])+' '+str(rgb_list[int(png[i,j])][2])+'\n')
f.close()
im = Image.new("RGB", (width, height))   #创建图片
file = open('C:/Users/WangPY/Desktop/code/CryptographyDesign/encrypted_RGB.txt','r')    #打开rbg值的文件
#通过每个rgb点生成图片
for i in range(0, height):
	for j in range(0, width):
		line = file.readline()  #获取一行的rgb值
		rgb = line.split(" ")  #分离rgb，文本中逗号后面有空格
		im.putpixel((i, j), (int(rgb[0]), int(rgb[1]), int(rgb[2])))    #将rgb转化为像素
im.save("C:/Users/WangPY/Desktop/encrypted(UsingExclusive)_lena.png")